Date Created: March 22, 2014
Author: Koushik Peri

Description:  This directory contains a solution to the classic host dispatcher problem written in C that was done as a group project for my operating systems class. Since this was a group project, I have highlighed my specific contributions in the main, hostd.c file, by placing my code between comments with my name in them. Search for the string "Koushik Peri" to find these comments

Contraints:
  User time threads are given a priority and are allocated cpu time by using a priority queue and a round robin scheduler with a time quantum of 1 second. If a user thread still needs more time after having run for one more second, its priority is lowered and it is re-entered in the queue. 
  Real time threads are run immediately once they arrive and they run until they are complete. There is 64 mb of memory dedicated to them and none of the real time threads will need more than 64 mbs of memory.


Comments: My approach for solving this problem was a simplistic one that utilized basic algorithms for my process scheduling and my memory allocation and eviction algorithms. For example, when trying to allocate memory, my algorithm will try to find the first contiguos block of memory for a process and if it doesn't find it, the process will be resubmitted into the priorty queue. The reason why I made this design decision was because of project requirements, and because the performance tradeoff was not worth the additional time and complexity that would have been introduced if my memory algorithm made smart choices when allocating memory blocks.
